name: Build (Online)

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  release:
    types: [published]

jobs:
  build-and-publish:
    # Do not run on PRs from forks
    if: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository) }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.x, 12.x, 14.x, 15.x]
    steps:
      # Checkout
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # All history

      # Build SDK Version from git
      - name: Set SDK version
        run: |
          # Tags
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TP_SDK_VERSION=$(git describe --tags --exact-match)
          else
            PARENT_TAG="$(git describe --tags --abbrev=0 || echo v0.0.0)"
            TP_SDK_VERSION="${PARENT_TAG}-beta.$(git rev-list --all --count)"
          fi
          if [ "${TP_SDK_VERSION:0:1}" != "v" ]; then
            >&2 echo "Git tag does not start with a 'v'!"
            exit 1;
          fi
          TP_SDK_VERSION="${TP_SDK_VERSION:1}"
          echo "TP_SDK_VERSION=${TP_SDK_VERSION}" >> $GITHUB_ENV

      - name: Update package.json
        run: echo "$(jq --arg sdk_version "${TP_SDK_VERSION}" '.version = $sdk_version' package.json)" > package.json

      # Setup Node.js environment
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Build the SDK (in Release mode)
      - name: Build
        run: npm run build:release

      # Run the unit-tests
      - name: Run unit-tests
        run: |
          set -euo pipefail
          mkdir reports
          npm run tests:unit | tee reports/unit_tests.txt
          pwd
          ls -l 
          ls -l reports/

      # Run a TestProject Agent + Chrome & Firefox headless browsers
      - name: Run and Register TestProject Agent
        if: matrix.node-version == '15.x'
        env:
          TP_API_KEY: ${{ secrets.TP_CI_API_KEY }}
        run: |
          trap 'kill $(jobs -p)' EXIT ERR
          envsubst < .github/ci/docker-compose.yml > docker-compose.yml
          docker-compose -f docker-compose.yml up -d
          attempt_counter=0
          max_attempts=45
          docker-compose -f docker-compose.yml logs -f | tee reports/agent.log&
          until curl -s http://localhost:8585/api/status | jq '.registered' | grep true; do
            if [ ${attempt_counter} -eq ${max_attempts} ]; then
              echo "Agent failed to register. Terminating..."
              exit 1
            fi
            attempt_counter=$(($attempt_counter+1))
            sleep 1
          done

      # Run all tests
      - name: Run flow tests
        if: matrix.node-version == '15.x'
        env:
          TP_DEV_TOKEN: ${{ secrets.TP_CI_DEV_TOKEN }}
          TP_AGENT_URL: http://localhost:8585
        run: |
          set -euo pipefail
          trap 'kill $(jobs -p)' EXIT ERR
          docker-compose -f docker-compose.yml logs -f --tail=0 >> reports/agent.log&
          npm run tests | tee reports/all_tests.txt

      # # Run examples
      # - name: Run examples
      #   if: matrix.node-version == '15.x'
      #   # SDK changes may require examples update, so don't fail the job if this step fails
      #   continue-on-error: true
      #   env:
      #     TP_DEV_TOKEN: ${{ secrets.TP_CI_DEV_TOKEN }}
      #     TP_AGENT_URL: http://localhost:8585
      #   run: |
      #     set -euo pipefail
      #     trap 'kill $(jobs -p)' EXIT ERR
      #     docker-compose -f docker-compose.yml logs -f --tail=0 >> reports/agent.log&

      #     # Clone the examples repo
      #     git clone https://github.com/testproject-io/opensdk-examples .opensdk-examples
      #     cd .opensdk-examples

      #     # Install dependencies, build and run
      #     npm install
      #     npm run build
      #     npm run tests | tee reports/examples.txt

      #     # Cleanup
      #     rm -rf .opensdk-examples

      # Create an SDK package (pull requests only)
      - name: Build package
        if: matrix.node-version == '15.x'
        run: npm pack

      # Publish a "beta" release to NPM
      - name: Publish to NPM (beta)
        if: matrix.node-version == '15.x' && startsWith(github.ref, 'refs/heads/master')
        uses: JS-DevTools/npm-publish@v1
        with:
          tag: "beta"
          token: ${{ secrets.TP_CI_NPM_TOKEN }}
          access: "public"

      # Publish a "latest" release to NPM
      - name: Publish to NPM (release)
        if: matrix.node-version == '15.x' && startsWith(github.ref, 'refs/tags/v')
        uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.TP_CI_NPM_TOKEN }}
          access: "public"

      # Upload the npm package as a release asset
      - name: Upload the npm package to GitHub release
        if: matrix.node-version == '15.x' && startsWith(github.ref, 'refs/tags/v')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: tpio-javascript-opensdk-${{ env.TP_SDK_VERSION }}.tgz
          asset_name: tpio-javascript-opensdk-${{ env.TP_SDK_VERSION }}.tgz
          tag: ${{ github.ref }}

      # Archive the generated reports
      - name: Archive reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v1
        with:
          name: reports
          path: reports

      # Archive the generated package
      - name: Archive package
        if: ${{ success() && matrix.node-version == '15.x' }}
        uses: actions/upload-artifact@v1
        with:
          name: package
          path: tpio-javascript-opensdk-${{ env.TP_SDK_VERSION }}.tgz
